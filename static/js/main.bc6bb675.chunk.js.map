{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"kNAYA,SAASA,EAAOC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACrCF,EAAMG,O,IAKbC,E,qLACWC,GAAI,IAAD,OACZ,OACI,kBAACN,EAAD,CACII,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAM1C,OACI,6BACI,yBAAKJ,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEvB,yBAAKP,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEvB,yBAAKP,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GA1BnBC,IAAMC,WAiCpBC,E,YAEF,WAAYX,GAAQ,IAAD,8BACf,4CAAMA,KACDY,MAAQ,CACTC,QAAS,CACL,CACIN,QAASO,MAAM,GAAGC,KAAK,QAa/BC,WAAY,EACZC,SAAS,GAnBE,E,yEAuBPZ,GACR,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMI,WAAa,GAE9DT,EADUM,EAAQA,EAAQM,OAAS,GACjBZ,QAAQW,QAC5BE,EAAgBb,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKM,MAAMK,QAAU,IAAM,IACxCX,KAAKe,SAAS,CACVR,QAASA,EAAQS,OAAO,CACpB,CACIf,QAASA,KAGjBS,WAAYH,EAAQM,OACpBF,SAAUX,KAAKM,MAAMK,a,6BAItBM,GACHjB,KAAKe,SAAS,CACVL,WAAYO,EACZN,QAAUM,EAAO,IAAO,M,+BAItB,IAgBFC,EAhBC,OACCX,EAAUP,KAAKM,MAAMC,QACrBY,EAAUZ,EAAQP,KAAKM,MAAMI,YAC7BU,EAASN,EAAgBK,EAAQlB,SAEjCoB,EAAQd,EAAQe,KAAI,SAACL,EAAMM,GAC7B,IAAMC,EAAOD,EACT,eAAiBA,EACjB,mBACJ,OACI,wBAAIE,IAAKF,EAAM5B,UAAY4B,IAAS,EAAKjB,MAAMI,WAAc,OAAQ,IACjE,4BAAQd,QAAS,kBAAM,EAAK8B,OAAOH,KAAQC,OAYvD,OALIN,EADAE,EACS,WAAaA,EAEb,iBAAmBpB,KAAKM,MAAMK,QAAU,IAAM,KAIvD,yBAAKhB,UAAU,QACX,yBAAKA,UAAU,cACX,kBAACG,EAAD,CACIG,QAASkB,EAAQlB,QACjBL,QAAS,SAAAG,GAAC,OAAI,EAAK4B,YAAY5B,OAGvC,yBAAKJ,UAAU,aACX,6BAAMuB,GACN,4BAAKG,S,GApFNlB,IAAMC,WA+FzB,SAASU,EAAgBb,GAWrB,IAVA,IAAM2B,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEF7B,EAAI,EAAGA,EAAI6B,EAAMf,OAAQd,IAAK,CAAC,IAAD,cACjB6B,EAAM7B,GADW,GAC5B8B,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAI9B,EAAQ4B,IAAM5B,EAAQ4B,KAAO5B,EAAQ6B,IAAM7B,EAAQ4B,KAAO5B,EAAQ8B,GAClE,OAAO9B,EAAQ4B,GAGvB,OAAO,KAnBXG,IAASC,OAAO,kBAAC5B,EAAD,MAAU6B,SAASC,eAAe,U","file":"static/js/main.bc6bb675.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css'\n//import * as serviceWorker from './serviceWorker';\n/*  TODO: \n    Display the location for each move in the format (col, row) in the move history list.\n    Rewrite Board to use two loops to make the squares instead of hardcoding them.\n    Add a toggle button that lets you sort the moves in either ascending or descending order.\n    When someone wins, highlight the three squares that caused the win.\n    When no one wins, display a message about the result being a draw.\n*/\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    // Game controla el estado de toda la aplicacion\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [ // Cada elemento dentro de this.state.history contendra un array de 9 valores\n                {\n                    squares: Array(9).fill(null)\n                },\n                /* \n                {\n                    squares: [\n                        null, null, null,\n                        null, null, null,\n                        null, null, null,\n                    ]\n                },\n                */\n            ],\n\n            stepNumber: 0, // Inicialmente estamos en el paso 0\n            xIsNext: true // Inicialmente X tiene el primer turno\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1); // Copia nueva de history, desde el 0 hasta el Ãºltimo, mas 1\n        const current = history[history.length - 1]; // Paso actual es el total de elementos en history meno el recien agregado\n        const squares = current.squares.slice(); // Copia de squares actual\n        if (calculateWinner(squares) || squares[i]) { // Si squares mas reciente devuelve un ganador o el cuadro clickado de squares actual (i) ya contiene valor, no hacer nada\n            return;\n        }\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\"; // Asignar valor a cuadro clicado (i)\n        this.setState({ // Agregar copia actual de squares a version actual de history (concat en vez de append)\n            history: history.concat([\n                {\n                    squares: squares\n                }\n            ]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext // bool inverso a xIsNext actual\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0 // si xIsNext es par, xIsNext = true\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n            const desc = move ?\n                'Go to move #' + move :\n                'Go to game start';\n            return (\n                <li key={move} className={(move === this.state.stepNumber) ? 'bold': ''}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = \"Winner: \" + winner;\n        } else {\n            status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={i => this.handleClick(i)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}